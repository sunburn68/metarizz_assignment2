import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.yellow50,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(5.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.teal60001,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray90001,
          fontSize: 16.fSize,
          fontFamily: 'Lexend',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: Color(0XFF233400),
          fontSize: 14.fSize,
          fontFamily: 'Lohit Devanagari',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.tealA10002,
          fontSize: 10.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: appTheme.tealA10001,
          fontSize: 13.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: appTheme.tealA10002,
          fontSize: 11.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: appTheme.teal90002,
          fontSize: 16.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.teal80001,
          fontSize: 14.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light();
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000A06);
  Color get black90001 => Color(0XFF001311);

  // Blackf
  Color get black9003f => Color(0X3F000000);

  // BlueGray
  Color get blueGray200 => Color(0XFF9CC6C2);
  Color get blueGray600 => Color(0XFF408873);
  Color get blueGray700 => Color(0XFF3A7A66);
  Color get blueGray70001 => Color(0XFF397A65);
  Color get blueGray900 => Color(0XFF1D2F2B);

  // Gray
  Color get gray400 => Color(0XFFB7B5A4);
  Color get gray900 => Color(0XFF002B16);
  Color get gray90001 => Color(0XFF233400);

  // Green
  Color get green600 => Color(0XFF368A60);
  Color get green700 => Color(0XFF307B55);
  Color get green800 => Color(0XFF296C4B);
  Color get greenA100 => Color(0XFFB1FFD8);
  Color get greenA10001 => Color(0XFFBFFFC5);
  Color get greenA200 => Color(0XFF42FFA4);

  // Teal
  Color get teal200 => Color(0XFF71B9B4);
  Color get teal300 => Color(0XFF44C09D);
  Color get teal600 => Color(0XFF109665);
  Color get teal60001 => Color(0XFF1E9079);
  Color get teal60002 => Color(0XFF008F66);
  Color get teal70000 => Color(0X0025826C);
  Color get teal800 => Color(0XFF006452);
  Color get teal80001 => Color(0XFF056A4D);
  Color get teal900 => Color(0XFF0D4936);
  Color get teal90000 => Color(0X0000302C);
  Color get teal90001 => Color(0XFF005C42);
  Color get teal90002 => Color(0XFF005940);
  Color get teal90003 => Color(0XFF105742);
  Color get tealA100 => Color(0XFFBBFEEE);
  Color get tealA10001 => Color(0XFF93FFE0);
  Color get tealA10002 => Color(0XFF97FFE1);
  Color get tealA10003 => Color(0XFFBCFFEE);
  Color get tealA10004 => Color(0XFFA5FFD4);
  Color get tealA200 => Color(0XFF89FFCB);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);

  // Yellow
  Color get yellow50 => Color(0XFFFFFCE1);
  Color get yellow5001 => Color(0XFFFEFFDD);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
